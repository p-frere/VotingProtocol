Index: src/Tokenizer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nenum Command\r\n{\r\n//    JOIN int,\r\n//    DETAILS [int],\r\n//    VOTE_OPTIONS [char],\r\n//    OUTCOME char [int],\r\n//    VOTE;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//import java.util.StringTokenizer;\r\n//\r\n///**\r\n// * A scanner and parser for requests.\r\n// */\r\n//class Tokenizer {\r\n//    Tokenizer() { ; }\r\n//\r\n//    public void getToken(String string) {\r\n//        String[] words = string.split(\" \");\r\n//\r\n//        switch (words[0]){\r\n//            case \"JOIN\":\r\n//                break;\r\n//            case \"VOTEOPTIONS\":\r\n//                break;\r\n//            case \"OUTCOME\":\r\n//                break;\r\n//            default:\r\n//                System.out.println(\"corrupt token recived\");\r\n//                break;\r\n//    }\r\n//\r\n//\r\n//    /**\r\n//     * Parses requests.\r\n//     */\r\n//    Token getToken(String req) {\r\n//        StringTokenizer sTokenizer = new StringTokenizer(req);\r\n//        if (!(sTokenizer.hasMoreTokens()))\r\n//            return null;\r\n//\r\n//        String firstToken = sTokenizer.nextToken();\r\n//\r\n//        if (firstToken.equals(\"JOIN\")) {\r\n//            if (sTokenizer.hasMoreTokens())\r\n//                return new JoinToken(req, sTokenizer.nextToken());\r\n//            else\r\n//                return null;\r\n//        }\r\n//\r\n//        if (firstToken.equals(\"YELL\")) {\r\n//            String msg = \"\";\r\n//            while (sTokenizer.hasMoreTokens())\r\n//                msg += \" \" + sTokenizer.nextToken();\r\n//            return new YellToken(req, msg);\r\n//        }\r\n//\r\n//        if (firstToken.equals(\"TELL\")) {\r\n//            String name = sTokenizer.nextToken();\r\n//            String msg = \"\";\r\n//            while (sTokenizer.hasMoreTokens())\r\n//                msg += \" \" + sTokenizer.nextToken();\r\n//            return new TellToken(req, name, msg);\r\n//        }\r\n//\r\n//        if (firstToken.equals(\"OUTCOME\")) {\r\n//            String name = sTokenizer.nextToken();\r\n//            String msg = \"\";\r\n//            while (sTokenizer.hasMoreTokens())\r\n//                msg += \" \" + sTokenizer.nextToken();\r\n//            return new TellToken(req, name, msg);\r\n//        }\r\n//\r\n//        if (firstToken.equals(\"VOTEOPTIONS\")) {\r\n//            String name = sTokenizer.nextToken();\r\n//            String msg = \"\";\r\n//            while (sTokenizer.hasMoreTokens())\r\n//                msg += \" \" + sTokenizer.nextToken();\r\n//            return new TellToken(req, name, msg);\r\n//        }\r\n//\r\n//        if (firstToken.equals(\"DETAILS\")) {\r\n//            String name = sTokenizer.nextToken();\r\n//            String msg = \"\";\r\n//            while (sTokenizer.hasMoreTokens())\r\n//                msg += \" \" + sTokenizer.nextToken();\r\n//            return new TellToken(req, name, msg);\r\n//        }\r\n//\r\n//        if (firstToken.equals(\"EXIT\"))\r\n//            return new ExitToken(req);\r\n//\r\n//        return null; // Ignore request..\r\n//    }\r\n//}\r\n//\r\n///**\r\n// * The Token Prototype.\r\n// */\r\n//abstract class Token {\r\n//    String _req;\r\n//}\r\n//\r\n///**\r\n// * Syntax: JOIN &lt;name&gt;\r\n// */\r\n//class JoinToken extends Token {\r\n//    String _name;\r\n//    JoinToken(String req, String name) {\r\n//        this._req = req;\r\n//        //turn to int\r\n//        this._name = name;\r\n//    }\r\n//}\r\n//\r\n///**\r\n// * Syntax: YELL &lt;msg&gt;\r\n// */\r\n//class YellToken extends Token {\r\n//    String _msg;\r\n//\r\n//    YellToken(String req, String msg) {\r\n//        this._req = req;\r\n//        this._msg = msg;\r\n//    }\r\n//}\r\n//\r\n///**\r\n// * Syntax: TELL &lt;rcpt&gt; &lt;msg&gt;\r\n// */\r\n//class TellToken extends Token {\r\n//    String _rcpt, _msg;\r\n//\r\n//    TellToken(String req, String rcpt, String msg) {\r\n//        this._req = req;\r\n//        this._rcpt = rcpt;\r\n//        this._msg = msg;\r\n//    }\r\n//}\r\n//\r\n///**\r\n// * Syntax: EXIT\r\n// */\r\n//class ExitToken extends Token {\r\n//    ExitToken(String req) { this._req = req; }\r\n//}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Tokenizer.java	(date 1556734109000)
+++ src/Tokenizer.java	(date 1556794773000)
@@ -1,151 +1,218 @@
+import java.util.Arrays;
 
-enum Command
+enum TokenType
 {
+    JOIN,
+    DETAILS,
+    VOTE_OPTIONS,
+    OUTCOME,
+    VOTE
+
 //    JOIN int,
 //    DETAILS [int],
 //    VOTE_OPTIONS [char],
 //    OUTCOME char [int],
-//    VOTE;
+//    VOTE [[int]];
+
+}
+
+/**
+ * A scanner and parser for requests.
+ */
+class Tokenizer {
+
+    public Token getToken(String string) {
+        String[] words = string.split(" ");
+
+        switch (words[0]) {
+            case "JOIN":
+                //check for words
+                return new JoinToken(words[1]);
+            case "VOTE_OPTIONS":
+                return new VoteOptionsToken(Arrays.copyOfRange(words, 1, words.length));
+            case "OUTCOME":
+                return new OutcomeToken(words[1], Arrays.copyOfRange(words, 2, words.length));
+            case "VOTE":
+                return new VoteToken(Arrays.copyOfRange(words, 1, words.length));
+            case "DETAILS":
+                return new DetailsToken(Arrays.copyOfRange(words, 1, words.length));
+            default:
+                System.out.println("corrupt token received");
+                return null;
+        }
+    }
+}
+
+
+abstract class Token {
+    TokenType tokenType;
+    abstract String createMessage();
+}
+
+class JoinToken extends Token {
+    int pport;
+
+    JoinToken(Integer pport) {
+        tokenType = TokenType.JOIN;
+        this.pport = pport;
+    }
+
+    JoinToken(String name) {
+        tokenType = TokenType.JOIN;
+        this.pport = Integer.valueOf(name);
+    }
+
+
+    public String getPportAsString() {
+        return Integer.toString(pport);
+    }
+
+    public int getPport() {
+        return pport;
+    }
+
+    public String createMessage(){
+        return  (tokenType.toString() + " " + getPportAsString());
+    }
+}
+
+class OutcomeToken extends Token {
+    private String[] parts;
+    private String outcome;
+
+    OutcomeToken(String outcome, String[] parts) {
+        tokenType = TokenType.OUTCOME;
+        this.outcome = outcome;
+        this.parts = parts;
+    }
+
+    public String getOutcome() {
+        return outcome;
+    }
+
+    public String[] getParts() {
+        return parts;
+    }
+
+    public String getPartsAsString(){
+        StringBuilder sb = new StringBuilder();
+        for (String part : parts){
+            sb.append(part);
+            sb.append(" ");
+        }
+        //sb.substring(0, sb.length()-2);
+        return sb.toString();
+    }
+
+    public String createMessage(){
+        return  (tokenType.toString() + " " + getOutcome() + " " + getPartsAsString());
+    }
+}
+
+//-------Details----
+class DetailsToken extends Token {
+    private int[] details;
+
+    DetailsToken(int[] details) {
+        tokenType = TokenType.DETAILS;
+        this.details = details;
+    }
+
+    DetailsToken(String[] details) {
+        tokenType = TokenType.DETAILS;
+        //converts string array to int array
+        this.details =  Arrays.asList(details).stream().mapToInt(Integer::parseInt).toArray();
+    }
+
+    public int[] getDetails() {
+        return details;
+    }
+
+    public String getDetailsAsString(){
+        StringBuilder sb = new StringBuilder();
+        for (int deet : details){
+            sb.append(deet);
+            sb.append(" ");
+        }
+        //sb.substring(0, sb.length()-2);
+        return sb.toString();
+    }
+
+    public String[] getDetailsAsStringArray() {
+        return Arrays.stream(details).mapToObj(String::valueOf).toArray(String[]::new);
+    }
+
+    public String createMessage(){
+        return  (tokenType.toString() + " "  + getDetailsAsString());
+    }
+}
+
+//--------Vote Options
+class VoteOptionsToken extends Token {
+    private String[] options;
+
+    VoteOptionsToken(String[] options) {
+        tokenType = TokenType.VOTE_OPTIONS;
+        this.options = options;
+    }
+
+    public String[] getOptions() {
+        return options;
+    }
+
+    public String getOptionsAsString(){
+        StringBuilder sb = new StringBuilder();
+        for (String part : options){
+            sb.append(part);
+            sb.append(" ");
+        }
+        //sb.substring(0, sb.length()-2);
+        return sb.toString();
+    }
+
+    public String createMessage(){
+        return  (tokenType.toString() + " "  + getOptionsAsString());
+    }
+}
+
+//-----------vote
+class VoteToken extends Token {
+private String[][] votes;
 
-}
+    VoteToken(String[][] votes) {
+    tokenType = TokenType.VOTE;
+    this.votes = votes;
+    }
 
+    VoteToken(String[] votes) {
+        tokenType = TokenType.VOTE;
 
+        String[][] orderedVotes = new String[votes.length/2][2];
+        for (int i = 0; i < votes.length; i+=2){
+            orderedVotes[i][0] = votes[i];
+            orderedVotes[i+1][1] = votes[i+1];
+        }
+        this.votes = orderedVotes;
+    }
 
 
-//import java.util.StringTokenizer;
-//
-///**
-// * A scanner and parser for requests.
-// */
-//class Tokenizer {
-//    Tokenizer() { ; }
-//
-//    public void getToken(String string) {
-//        String[] words = string.split(" ");
-//
-//        switch (words[0]){
-//            case "JOIN":
-//                break;
-//            case "VOTEOPTIONS":
-//                break;
-//            case "OUTCOME":
-//                break;
-//            default:
-//                System.out.println("corrupt token recived");
-//                break;
-//    }
-//
-//
-//    /**
-//     * Parses requests.
-//     */
-//    Token getToken(String req) {
-//        StringTokenizer sTokenizer = new StringTokenizer(req);
-//        if (!(sTokenizer.hasMoreTokens()))
-//            return null;
-//
-//        String firstToken = sTokenizer.nextToken();
-//
-//        if (firstToken.equals("JOIN")) {
-//            if (sTokenizer.hasMoreTokens())
-//                return new JoinToken(req, sTokenizer.nextToken());
-//            else
-//                return null;
-//        }
-//
-//        if (firstToken.equals("YELL")) {
-//            String msg = "";
-//            while (sTokenizer.hasMoreTokens())
-//                msg += " " + sTokenizer.nextToken();
-//            return new YellToken(req, msg);
-//        }
-//
-//        if (firstToken.equals("TELL")) {
-//            String name = sTokenizer.nextToken();
-//            String msg = "";
-//            while (sTokenizer.hasMoreTokens())
-//                msg += " " + sTokenizer.nextToken();
-//            return new TellToken(req, name, msg);
-//        }
-//
-//        if (firstToken.equals("OUTCOME")) {
-//            String name = sTokenizer.nextToken();
-//            String msg = "";
-//            while (sTokenizer.hasMoreTokens())
-//                msg += " " + sTokenizer.nextToken();
-//            return new TellToken(req, name, msg);
-//        }
-//
-//        if (firstToken.equals("VOTEOPTIONS")) {
-//            String name = sTokenizer.nextToken();
-//            String msg = "";
-//            while (sTokenizer.hasMoreTokens())
-//                msg += " " + sTokenizer.nextToken();
-//            return new TellToken(req, name, msg);
-//        }
-//
-//        if (firstToken.equals("DETAILS")) {
-//            String name = sTokenizer.nextToken();
-//            String msg = "";
-//            while (sTokenizer.hasMoreTokens())
-//                msg += " " + sTokenizer.nextToken();
-//            return new TellToken(req, name, msg);
-//        }
-//
-//        if (firstToken.equals("EXIT"))
-//            return new ExitToken(req);
-//
-//        return null; // Ignore request..
-//    }
-//}
-//
-///**
-// * The Token Prototype.
-// */
-//abstract class Token {
-//    String _req;
-//}
-//
-///**
-// * Syntax: JOIN &lt;name&gt;
-// */
-//class JoinToken extends Token {
-//    String _name;
-//    JoinToken(String req, String name) {
-//        this._req = req;
-//        //turn to int
-//        this._name = name;
-//    }
-//}
-//
-///**
-// * Syntax: YELL &lt;msg&gt;
-// */
-//class YellToken extends Token {
-//    String _msg;
-//
-//    YellToken(String req, String msg) {
-//        this._req = req;
-//        this._msg = msg;
-//    }
-//}
-//
-///**
-// * Syntax: TELL &lt;rcpt&gt; &lt;msg&gt;
-// */
-//class TellToken extends Token {
-//    String _rcpt, _msg;
-//
-//    TellToken(String req, String rcpt, String msg) {
-//        this._req = req;
-//        this._rcpt = rcpt;
-//        this._msg = msg;
-//    }
-//}
-//
-///**
-// * Syntax: EXIT
-// */
-//class ExitToken extends Token {
-//    ExitToken(String req) { this._req = req; }
-//}
+    public String[][] getVotes() {
+        return votes;
+    }
+
+    public String getVotesAsString(){
+        StringBuilder sb = new StringBuilder();
+        for (String[] vote : votes){
+            sb.append(vote[0]);
+            sb.append(" ");
+            sb.append(vote[1]);
+            sb.append(" ");
+        }
+        //sb.substring(0, sb.length()-2);
+        return sb.toString();
+    }
+
+    public String createMessage(){
+            return  (tokenType.toString() + " "  + getVotesAsString());
+    }
+}
\ No newline at end of file
Index: src/Coordinator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.net.ServerSocket;\r\nimport java.net.Socket;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Iterator;\r\n\r\n/**\r\n * The Coordinator is able to handle up to _MAXCLIENTS clients\r\n * simultaneously.\r\n *\r\n * Supported vocabulary:\r\n * JOIN name - Request to join the group\r\n * YELL msg - Sends the msg to clients\r\n * TELL name msg - Sends the msg only the the specified client\r\n * EXIT - The client gets released by the server\r\n * @author Tim Norman, University of Southampton\r\n * @version 2.0\r\n */\r\n\r\npublic class Coordinator\r\n{\r\n    /** Max # of clients. */\r\n    final int _MAXCLIENTS = 50;\r\n\r\n    private Map<Integer,Token> partMap = Collections.synchronizedMap(new HashMap<Integer,Token>(_MAXCLIENTS));\r\n\r\n\r\n    /** Maps name to socket. Key is clientName, value is clientOut. */\r\n    private Map<Integer,PrintWriter> outcomesRecived = Collections.synchronizedMap(new HashMap<Integer,PrintWriter>(_MAXCLIENTS));\r\n\r\n    /**\r\n     * For each client we create a thread that handles\r\n     * all i/o with that client.\r\n     */\r\n    private class ServerThread extends Thread {\r\n        private Socket partSocket;\r\n        private String _clientName;\r\n        private BufferedReader br_clientIn;\r\n        private PrintWriter pw_clientOut;\r\n\r\n        ServerThread(Socket client) throws IOException {\r\n            partSocket = client;\r\n\r\n            // Open I/O steams\r\n            br_clientIn = new BufferedReader( new InputStreamReader( client.getInputStream() ) );\r\n            pw_clientOut = new PrintWriter( new OutputStreamWriter( client.getOutputStream() ) );\r\n\r\n            // Welcome message.\r\n            pw_clientOut.println( \"Welcome to Coordinator\\n \");\r\n            pw_clientOut.flush();\r\n        }\r\n\r\n        public void run(){\r\n            try {\r\n                Token token = null;\r\n                Tokenizer tokenizer = new Tokenizer();\r\n\r\n                // First, the part must send a join\r\n                token = tokenizer.getToken(br_clientIn.readLine());\r\n                if (!(token instanceof JoinToken)) {\r\n                    partSocket.close();\r\n                    return;\r\n                }\r\n\r\n                // Adds the ID to the list of parts\r\n                // ??? Check the part's ID (Should be the port it's listingn on), Check it's not repeated ???\r\n                if (!(register(_clientName = ((JoinToken)token)._name, pw_clientOut))) {\r\n                    partSocket.close();\r\n                    return;\r\n                }\r\n\r\n                // If this succeeds, check if all parties have joined\r\n                checkParticipants();\r\n\r\n                //wait till all send initail data\r\n                wait();\r\n\r\n\r\n                // process requests until client exits.\r\n                token = tokenizer.getToken( br_clientIn.readLine() );\r\n                while (!(token instanceof ExitToken)) {\r\n                    if (token instanceof YellToken)\r\n                        yell(_clientName, ((YellToken)token)._msg);\r\n                    if (token instanceof TellToken)\r\n                        tell(_clientName, ((TellToken)token)._rcpt, ((TellToken)token)._msg);\r\n\r\n                    if (token instanceof OutcomeToken)\r\n                        outcomesRecived.put(_clientName, (TellToken)token);\r\n\r\n\r\n                    // Ignore JoinToken\r\n                    token = tokenizer.getToken(br_clientIn.readLine());\r\n                }\r\n\r\n\r\n                partSocket.close();\r\n                unregister(_clientName);\r\n            }\r\n            catch (IOException | InterruptedException e) {\r\n                System.err.println(\"Caught I/O Exception.\");\r\n                unregister(_clientName);\r\n            }\r\n        }\r\n\r\n        public void checkParticipants(){\r\n            //if all parties have joined, send details and vote options\r\n            if (partMap.size() == parts){\r\n                yell(_clientName, ((YellToken)token)._msg);\r\n            }\r\n\r\n            //all will start\r\n            notifyAll();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Attempts to register the client under the specified name.\r\n     * Return true if successful.\r\n     */\r\n    boolean register(Integer port, PrintWriter out)\r\n    {\r\n        // if (_numOfClients >= _MAXCLIENTS)\r\n        //     return false;\r\n\r\n        // if (partMap.containsKey(name)) {\r\n        //     System.err.println(\"Coordinator: Name already joined.\");\r\n        //     return false;\r\n        // }\r\n\r\n        try {\r\n            partMap.put(port, out);\r\n        }\r\n        catch (NullPointerException e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Unregisters the client with the specified name.\r\n     */\r\n    void unregister(String name)\r\n    {\r\n        partMap.remove(name);\r\n        _numOfClients--;\r\n        yell(\"Coordinator\", name+\" has exited.\");\r\n    }\r\n\r\n    /**\r\n     * Send a message to all registered clients.\r\n     */\r\n    synchronized void yell(String sender, String msg)\r\n    {\r\n        String txt = sender + \": \" + msg;\r\n        Iterator iter = partMap.values().iterator();\r\n        while (iter.hasNext()) {\r\n            PrintWriter pw = (PrintWriter)iter.next();\r\n            pw.println(txt);\r\n            pw.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a message to the specified recipient.\r\n     */\r\n    synchronized void tell(String sender, String rcpt, String msg)\r\n    {\r\n        String txt = sender + \": \" + msg;\r\n        PrintWriter pw = partMap.get(rcpt);\r\n        if (pw == null)\r\n            return; // No client with the specified name\r\n        pw.println(txt);\r\n        pw.flush();\r\n    }\r\n\r\n    // Wait for a connection request.\r\n    void startListening(int port, int parts) throws IOException{\r\n        int joinedCnt = 0;\r\n        ServerSocket listener = new ServerSocket(port);\r\n        System.out.println(\"Listning...\");\r\n\r\n        while (joinedCnt <= parts) {\r\n            Socket client = listener.accept();\r\n            new ServerThread(client).start();\r\n            joinedCnt++;\r\n            System.out.println(\"Participant joined \" + joinedCnt + \"/\" + parts);\r\n        }\r\n\r\n        listener.close();\r\n        System.out.println(\"Stopped listning.\");\r\n    }\r\n\r\n    void init(String[] args) throws IOException {\r\n        //extraction of options\r\n        port = Integer.parseInt(args[0]);\r\n        parts = Integer.parseInt(args[1]);\r\n        votingOptions = Arrays.copyOfRange(args, 2, args.length);\r\n        participants = new int[parts];\r\n\r\n        //confirm for user\r\n        System.out.println(\"Coordinator started - Port: \" + port);\r\n        System.out.println(\"Expecting participant count: \" + parts);\r\n\r\n        //start listing\r\n        startListening(port, parts);\r\n    }\r\n\r\n    private int port;\r\n    private int parts;\r\n    private String[] votingOptions;\r\n    private int[] participants;\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        System.out.println(\"Server started on <port>\");\r\n        Coordinator coord =  new Coordinator();\r\n        coord.init(args);\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Coordinator.java	(date 1556734109000)
+++ src/Coordinator.java	(date 1556827969000)
@@ -30,7 +30,7 @@
     /** Max # of clients. */
     final int _MAXCLIENTS = 50;
 
-    private Map<Integer,Token> partMap = Collections.synchronizedMap(new HashMap<Integer,Token>(_MAXCLIENTS));
+    private Map<String, Integer> partMap = Collections.synchronizedMap(new HashMap<String, Integer>(_MAXCLIENTS));
 
 
     /** Maps name to socket. Key is clientName, value is clientOut. */
@@ -71,11 +71,8 @@
                 }
 
                 // Adds the ID to the list of parts
-                // ??? Check the part's ID (Should be the port it's listingn on), Check it's not repeated ???
-                if (!(register(_clientName = ((JoinToken)token)._name, pw_clientOut))) {
-                    partSocket.close();
-                    return;
-                }
+                //?? check ports ID - should be the port it's listing on
+                partMap.put(((JoinToken) token).getPportAsString(),((JoinToken) token).getPport());
 
                 // If this succeeds, check if all parties have joined
                 checkParticipants();
@@ -83,6 +80,8 @@
                 //wait till all send initail data
                 wait();
 
+                //start sending info
+
 
                 // process requests until client exits.
                 token = tokenizer.getToken( br_clientIn.readLine() );
@@ -113,11 +112,8 @@
         public void checkParticipants(){
             //if all parties have joined, send details and vote options
             if (partMap.size() == parts){
-                yell(_clientName, ((YellToken)token)._msg);
-            }
-
-            //all will start
-            notifyAll();
+                notifyAll();
+            }
         }
     }
 
Index: src/Participant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.net.Socket;\r\n\r\npublic class Participant {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        int cport;\r\n        int pport;\r\n        timeout\r\n        cporti hpporti htimeouti hfailurecondi\r\n    }\r\n\r\n    public void init() throws IOException {\r\n\r\n        // Connect directly to the IRC server.\r\n\r\n        Socket socket = new Socket(server, 6667);\r\n        pleaselogin\r\n\r\n\r\n        // Log on to the server.\r\n\r\n        writer.write(\"NICK \" + nick + \"\\r\\n\");\r\n        writer.write(\"USER \" + login + \" 8 * : Java IRC Hacks Bot\\r\\n\");\r\n        writer.flush( );\r\n\r\n        // Read lines from the server until it tells us we have connected.\r\n        String line = null;\r\n        while ((line = reader.readLine( )) != null) {\r\n            if (line.indexOf(\"004\") >= 0) {\r\n                // We are now logged in.\r\n                break;\r\n\r\n            }\r\n            else if (line.indexOf(\"433\") >= 0) {\r\n                System.out.println(\"Nickname is already in use.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n        // Join the channel.\r\n\r\n        writer.write(\"JOIN \" + channel + \"\\r\\n\");\r\n        writer.flush( );\r\n\r\n        // Keep reading lines from the server.\r\n\r\n        while ((line = reader.readLine( )) != null) {\r\n            if (line.toLowerCase( ).startsWith(\"PING \")) {\r\n                // We must respond to PINGs to avoid being disconnected.\r\n                writer.write(\"PONG \" + line.substring(5) + \"\\r\\n\");\r\n                writer.write(\"PRIVMSG \" + channel + \" :I got pinged!\\r\\n\");\r\n                writer.flush( );\r\n            }\r\n\r\n            else {\r\n\r\n                // Print the raw line received by the bot.\r\n\r\n                System.out.println(line);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Participant.java	(date 1556734109000)
+++ src/Participant.java	(date 1556787651000)
@@ -6,17 +6,15 @@
     public static void main(String[] args) throws Exception {
         int cport;
         int pport;
-        timeout
-        cporti hpporti htimeouti hfailurecondi
+        int timeout;
+        int failurecond;
     }
 
-    public void init() throws IOException {
+    public void init(int cport, int pport) throws IOException {
 
         // Connect directly to the IRC server.
 
         Socket socket = new Socket(server, 6667);
-        pleaselogin
-
 
         // Log on to the server.
 
